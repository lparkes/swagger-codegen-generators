# Go API client for {{packageName}}

{{#appDescription}}
{{{appDescription}}}
{{/appDescription}}

## Overview
This API client was generated by the [swagger-codegen](https://github.com/swagger-api/swagger-codegen) project.  By using the [swagger-spec](https://github.com/swagger-api/swagger-spec) from a remote server, you can easily generate an API client.

- API version: {{appVersion}}
- Package version: {{packageVersion}}
{{^hideGenerationTimestamp}}
- Build date: {{generatedDate}}
{{/hideGenerationTimestamp}}
- Build package: {{generatorClass}}
{{#infoUrl}}
For more information, please visit [{{{infoUrl}}}]({{{infoUrl}}})
{{/infoUrl}}

## Installation
Put the package under your project folder and add the following in import:
```golang
import "./{{packageName}}"
```

```go
package main

import (
	"context"

	"{{packageName}}"
)

func main() {
	client := {{packageName}}.NewAPIClient({{packageName}}.NewConfiguration())
	client.DefaultApi.MibsKeysGet(context.TODO())
}
```

## Documentation for API Endpoints

All URIs are relative to *{{basePath}}*

Class | Method | HTTP request | Description
------------ | ------------- | ------------- | -------------
{{#apiInfo}}{{#apis}}{{#operations}}{{#operation}}*{{classname}}* | [**{{operationId}}**]({{apiDocPath}}{{classname}}.md#{{operationIdLowerCase}}) | **{{httpMethod}}** {{path}} | {{#summary}}{{summary}}{{/summary}}
{{/operation}}{{/operations}}{{/apis}}{{/apiInfo}}

## Documentation For Models

{{#models}}{{#model}} - [{{{classname}}}]({{modelDocPath}}{{{classname}}}.md)
{{/model}}{{/models}}

## Documentation For Authorization
{{^authMethods}} Endpoints do not require authorization.
{{/authMethods}}{{#authMethods}}{{#last}} Authentication schemes defined for the API:{{/last}}{{/authMethods}}
{{#authMethods}}
## {{{name}}}
{{#isApiKey}}- **Type**: API key 

Example
```golang
client.SetAPIKey("APIKEY")
r, err := client.Service().Operation(args)
```
{{/isApiKey}}
{{#isBasic}}- **Type**: HTTP basic authentication

Example
```golang
client.SetBasicAuth("username", "password")
r, err := client.Service().Operation(args)
```
{{/isBasic}}
{{#isOAuth}}- **Type**: OAuth
- **Flow**: {{{flow}}}
- **Authorization URL**: {{{authorizationUrl}}}
- **Scopes**: {{^scopes}}N/A{{/scopes}}
{{#each scopes}} - **{{@key}}**: {{this}}
{{/each}}

Example using an HTTP client from the oauth2 library to automatically
refresh tokens and perform user authentication.
```golang
import (
	"context"
	"golang.org/x/oauth2"
)

/* Perform OAuth2 round trip request and obtain a token */
conf := ... // a *oauth2.Config
token := ... // your access token (*oauth2.Token)
httpClient := conf.Client(context.Background(), token)

cfg := NewConfiguration()
cfg.HTTPClient = httpClient
client := NewAPIClient(cfg)
r, err := client.Service().Operation(args)
```
{{/isOAuth}}
{{/authMethods}}

## Author

{{#apiInfo}}{{#apis}}{{^hasMore}}{{infoEmail}}
{{/hasMore}}{{/apis}}{{/apiInfo}}
