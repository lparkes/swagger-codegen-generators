package {{packageName}}

{{>partial_header}}

{{#operations}}
import (
	"context"
	"io/ioutil"
	"net/url"
	"strings"
{{#imports}}	"{{import}}"
{{/imports}}
)

// The swagger-codegen service groups provide a reasonable way to
// organise the API, but little value in the actual implementation so
// we just reuse the APIClient type.

// {{classname}}Service represents the collection of APIs associated
// with the {{classname}} tag in the API specification.
type {{classname}}Service = APIClient

// {{classname}}Service takes a pointer to an APIClient and returns a
// pointer to a {{classname}}Service. You should do that, even though you
// don't really need to.
func (c *APIClient) {{classname}}Service () *{{classname}}Service {
	return c
}
{{#operation}}
{{#contents}}
{{#@first}}

/*
{{{nickname}}}{{#summary}} {{.}}{{/summary}}{{#notes}}
{{notes}}{{/notes}}

The required parameters for {{{nickname}}} are:
ctx - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
{{#parameters}}{{#required}}{{paramName}}{{#description}} - {{.}}{{/description}}
{{/required}}{{/parameters}}{{#hasOptionalParams}}

The following parameters are optional and may be nil.
{{#parameters}}{{^required}}{{paramName}}{{#description}} - {{.}}{{/description}}
{{/required}}{{/parameters}}{{/hasOptionalParams}}
{{#returnType}}

{{{nickname}}} returns a {{{returnType}}} on success and returns error != nil on failure.{{/returnType}}
*/
func (a *{{{classname}}}Service) {{{nickname}}}({{#parameters}}{{#required}}{{paramName}} {{{dataType}}}{{#hasMore}}, {{/hasMore}}{{/required}}{{/parameters}}{{#hasOptionalParams}}{{#parameters}}{{^required}}{{paramName}} *{{{dataType}}}{{#hasMore}}, {{/hasMore}}{{/required}}{{/parameters}}{{/hasOptionalParams}}) ({{#returnType}}{{{returnType}}}, {{/returnType}}error) {
	return a.{{{nickname}}}WithContext(context.Background(){{#hasParams}}, {{/hasParams}}{{#parameters}}{{#required}}{{paramName}}{{#hasMore}}, {{/hasMore}}{{/required}}{{/parameters}}{{#hasOptionalParams}}{{#parameters}}{{^required}}{{paramName}}{{#hasMore}}, {{/hasMore}}{{/required}}{{/parameters}}{{/hasOptionalParams}})
}

// {{{nickname}}}WithContext is the same as {{{nickname}}} with a context.Context parameter.
func (a *{{{classname}}}Service) {{{nickname}}}WithContext(ctx context.Context{{#hasParams}}, {{/hasParams}}{{#parameters}}{{#required}}{{paramName}} {{{dataType}}}{{#hasMore}}, {{/hasMore}}{{/required}}{{/parameters}}{{#hasOptionalParams}}{{#parameters}}{{^required}}{{paramName}} *{{{dataType}}}{{#hasMore}}, {{/hasMore}}{{/required}}{{/parameters}}{{/hasOptionalParams}}) ({{#returnType}}{{{returnType}}}, {{/returnType}}error) {
	var (
		localVarHttpMethod = strings.ToUpper("{{httpMethod}}")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		{{#returnType}}localVarReturnValue {{{returnType}}}{{/returnType}}
	)

	// create path and map variables
	localVarPath := a.cfg.BasePath + "{{{path}}}"{{#pathParams}}
	localVarPath = strings.Replace(localVarPath, "{"+"{{baseName}}"+"}", fmt.Sprintf("%v", {{paramName}}), -1){{/pathParams}}

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	{{#parameters}}
	{{#required}}
	{{#minItems}}
	if len({{paramName}}) < {{minItems}} {
		return {{#returnType}}localVarReturnValue, {{/returnType}}reportError("{{paramName}} must have at least {{minItems}} elements")
	}
	{{/minItems}}
	{{#maxItems}}
	if len({{paramName}}) > {{maxItems}} {
		return {{#returnType}}localVarReturnValue, {{/returnType}}reportError("{{paramName}} must have less than {{maxItems}} elements")
	}
	{{/maxItems}}
	{{#minLength}}
	if strlen({{paramName}}) < {{minLength}} {
		return {{#returnType}}localVarReturnValue, {{/returnType}}reportError("{{paramName}} must have at least {{minLength}} elements")
	}
	{{/minLength}}
	{{#maxLength}}
	if strlen({{paramName}}) > {{maxLength}} {
		return {{#returnType}}localVarReturnValue, {{/returnType}}reportError("{{paramName}} must have less than {{maxLength}} elements")
	}
	{{/maxLength}}
	{{#minimum}}
	{{#isString}}
	{{paramName}}Txt, err := atoi({{paramName}})
	if {{paramName}}Txt < {{minimum}} {
	{{/isString}}
	{{^isString}}
	if {{paramName}} < {{minimum}} {
	{{/isString}}
		return {{#returnType}}localVarReturnValue, {{/returnType}}reportError("{{paramName}} must be greater than {{minimum}}")
	}
	{{/minimum}}
	{{#maximum}}
	{{#isString}}
	{{paramName}}Txt, err := atoi({{paramName}})
	if {{paramName}}Txt > {{maximum}} {
	{{/isString}}
	{{^isString}}
	if {{paramName}} > {{maximum}} {
	{{/isString}}
		return {{#returnType}}localVarReturnValue, {{/returnType}}reportError("{{paramName}} must be less than {{maximum}}")
	}
	{{/maximum}}
	{{/required}}
	{{/parameters}}

	{{#hasQueryParams}}
	{{#queryParams}}
	{{#required}}
	localVarQueryParams.Add("{{baseName}}", parameterToString({{paramName}}, "{{#collectionFormat}}{{collectionFormat}}{{/collectionFormat}}"))
	{{/required}}
	{{^required}}
	if {{paramName}} != nil {
		localVarQueryParams.Add("{{baseName}}", parameterToString({{paramName}}, "{{#collectionFormat}}{{collectionFormat}}{{/collectionFormat}}"))
	}
	{{/required}}
	{{/queryParams}}
	{{/hasQueryParams}}
	// to determine the Content-Type header
{{=<% %>=}}
	localVarHttpContentTypes := []string{<%#consumes%>"<%&mediaType%>"<%^@last%>, <%/@last%><%/consumes%>}
<%={{ }}=%>

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
{{=<% %>=}}
	localVarHttpHeaderAccepts := []string{<%#produces%>"<%&mediaType%>"<%^@last%>, <%/@last%><%/produces%>}
<%={{ }}=%>

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
{{#hasHeaderParams}}
{{#headerParams}}
	{{#required}}
	localVarHeaderParams["{{baseName}}"] = parameterToString({{paramName}}, "{{#collectionFormat}}{{collectionFormat}}{{/collectionFormat}}")
	{{/required}}
	{{^required}}
	if localVarOptionals != nil && localVarOptionals.{{vendorExtensions.x-exportParamName}}.IsSet() {
		localVarHeaderParams["{{baseName}}"] = parameterToString(localVarOptionals.{{vendorExtensions.x-exportParamName}}.Value(), "{{#collectionFormat}}{{collectionFormat}}{{/collectionFormat}}")
	}
	{{/required}}
{{/headerParams}}
{{/hasHeaderParams}}
{{#hasFormParams}}
{{#formParams}}
{{#isFile}}
{{#required}}
    localVarFile := {{paramName}}
{{/required}}
{{^required}}
    var localVarFile {{dataType}}
	if localVarOptionals != nil && localVarOptionals.{{vendorExtensions.x-exportParamName}}.IsSet() {
		localVarFileOk := false
		localVarFile, localVarFileOk = localVarOptionals.{{vendorExtensions.x-exportParamName}}.Value().({{dataType}})
		if !localVarFileOk {
				return {{#returnType}}localVarReturnValue, {{/returnType}}reportError("{{paramName}} should be {{dataType}}")
		}
	}
{{/required}}
	if localVarFile != nil {
		fbs, _ := ioutil.ReadAll(localVarFile)
		localVarFileBytes = fbs
		localVarFileName = localVarFile.Name()
		localVarFile.Close()
	}
{{/isFile}}
{{^isFile}}
{{#required}}
	localVarFormParams.Add("{{baseName}}", parameterToString({{paramName}}, "{{#collectionFormat}}{{collectionFormat}}{{/collectionFormat}}"))
{{/required}}
{{^required}}
	if localVarOptionals != nil && localVarOptionals.{{vendorExtensions.x-exportParamName}}.IsSet() {
		localVarFormParams.Add("{{baseName}}", parameterToString(localVarOptionals.{{vendorExtensions.x-exportParamName}}.Value(), "{{#collectionFormat}}{{collectionFormat}}{{/collectionFormat}}"))
	}
{{/required}}
{{/isFile}}
{{/formParams}}
{{/hasFormParams}}
{{#hasBodyParam}}
{{#bodyParams}}	// body params
{{#required}}
	localVarPostBody = &{{paramName}}
{{/required}}
{{^required}}
	if localVarOptionals != nil && localVarOptionals.{{vendorExtensions.x-exportParamName}}.IsSet() {
		{{#isPrimitiveType}}localVarPostBody = &localVarOptionals.{{vendorExtensions.x-exportParamName}}.Value(){{/isPrimitiveType}}
		{{^isPrimitiveType}}localVarOptional{{vendorExtensions.x-exportParamName}}:= localVarOptionals.{{vendorExtensions.x-exportParamName}}.Value()
		localVarPostBody = &localVarOptional{{vendorExtensions.x-exportParamName}}{{/isPrimitiveType}}
	}
{{/required}}
{{/bodyParams}}
{{/hasBodyParam}}
{{#authMethods}}
{{#isApiKey}}
{{#isKeyInHeader}}

	localVarHeaderParams["{{keyParamName}}"] = a.apiKey

{{/isKeyInHeader}}
{{#isKeyInQuery}}

	localVarQueryParams.Add("{{keyParamName}}", a.apiKey)

{{/isKeyInQuery}}
{{/isApiKey}}
{{#isBearer}}

	localVarHeaderParams["Authorization"] = a.authToken
{{/isBearer}}
{{/authMethods}}
	r, err := a.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return {{#returnType}}localVarReturnValue, {{/returnType}}err
	}
{{#authMethods}}
{{#isApiKey}}
{{#isKeyInCookie}}
	// swagger-codegen doesn't understand API keys in cookies
	// so this code will never be generated
	r.AddCookie(&Cookie{Name: "{{keyParamName}}", Value: a.apiKey})
{{/isKeyInCookie}}
{{/isApiKey}}
{{#isBasic}}

	r.SetBasicAuth(a.username, a.password)
{{/isBasic}}
{{/authMethods}}

	localVarHttpResponse, err := a.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return {{#returnType}}localVarReturnValue, {{/returnType}}GenericSwaggerError {
			body: nil,
			model: nil,
			error: err.Error(),
			response: localVarHttpResponse,
		}
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return {{#returnType}}localVarReturnValue, {{/returnType}}err
	}

	{{#returnType}}
	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil {
			newErr := GenericSwaggerError{
				body: localVarBody,
				model: localVarReturnValue,
				error: err.Error(),
				response: localVarHttpResponse,
			}
			return {{#returnType}}localVarReturnValue, {{/returnType}}newErr
		}
	}
	{{/returnType}}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
			response: localVarHttpResponse,
		}
		{{#responses}}{{#dataType}}
		if localVarHttpResponse.StatusCode == {{{code}}} {
			var v {{{dataType}}}
			err = a.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return {{#returnType}}localVarReturnValue, {{/returnType}}newErr
				}
				newErr.model = v
				return {{#returnType}}localVarReturnValue, {{/returnType}}newErr
		}
		{{/dataType}}{{/responses}}
		return {{#returnType}}localVarReturnValue, {{/returnType}}newErr
	}

	return {{#returnType}}localVarReturnValue, {{/returnType}}nil
}
{{/@first}}{{/contents}}{{/operation}}{{/operations}}